{"version":3,"sources":["components/expense_row.js","components/expense_table.js","components/budget_card.js","components/enter_expense.js","App.js","reportWebVitals.js","index.js"],"names":["ExpenseRow","id","date","amount","category","note","date_obj","Date","items","String","getMonth","getUTCDate","toFixed","map","item","idx","ExpenseTable","expenses","tableVisible","visibilityStyle","visibility","overflow","style","className","scope","expense","BudgetCard","budget_amount","amount_remaining","category_transactions","left_to_spend","spent","card_style_class","message","Math","round","onClick","s","length","i","forEach","trans","day_month_date","alert","EnterExpense","addExpense","categories","category_amount_remaining","today","toISOString","slice","indexOf","useState","setDate","setNote","setCategory","setAmount","goodLabelStyle","badLabelStyle","goodInputStyle","badInputStyle","dateLabelStyle","setDateLabelStyle","dateInputStyle","setDateInputStyle","amountLabelStyle","setAmountLabelStyle","amountInputStyle","setAmountInputStyle","noteLabelStyle","setNoteLabelStyle","noteInputStyle","setNoteInputStyle","categoryLabelStyle","setCategoryLabelStyle","categorySelectStyle","setCategorySelectStyle","categoriesOptions","name","padEnd","value","handleChange","data","e","target","onSubmit","preventDefault","okay","float_amount","Number","htmlFor","type","onChange","step","placeholder","base","require","apiKey","process","App","setExpenses","setCategories","setTableVisible","a","list_records","select","view","eachPage","records","fetchNextPage","record","push","fields","err","console","error","create","useEffect","get_transactions_from_airtable","get_categories_from_airtable","actual_budget_spent","total_spent","total_budget","hasOwnProperty","name_index_category_dict","amount_left","time","getTime","setMonth","days","getDate","days_in_month","todays_budget","post_new_transaction_to_airtable","filter","cursor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fd0d7d40.chunk.js","sourcesContent":["const ExpenseRow = ({ id, date, amount, category, note }) => {\r\n  const date_obj = new Date(date);\r\n  const day_month_date =\r\n    String(date_obj.getMonth() + 1) + \"/\" + String(date_obj.getUTCDate());\r\n  const items = [day_month_date, amount.toFixed(2), category, note];\r\n\r\n  return (\r\n    <tr id={id}>\r\n      {items.map((item, idx) => (\r\n        <td key={idx}>{item}</td>\r\n      ))}\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default ExpenseRow;\r\n","import ExpenseRow from \"./expense_row\";\r\n\r\nconst ExpenseTable = ({ expenses, tableVisible }) => {\r\n  let visibilityStyle = {\r\n    visibility: tableVisible != null && !tableVisible ? \"hidden\" : \"visible\",\r\n    overflow: \"scroll\",\r\n  };\r\n  return (\r\n    <table\r\n      style={visibilityStyle}\r\n      className=\"table table-striped table-dark table-hover align-left\"\r\n    >\r\n      <thead>\r\n        <tr>\r\n          <th scope=\"col\">Date</th>\r\n          <th scope=\"col\">Amount</th>\r\n          <th scope=\"col\">Category</th>\r\n          <th scope=\"col\">Note</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {expenses.map((expense, idx) => (\r\n          <ExpenseRow\r\n            id={idx}\r\n            key={idx}\r\n            date={expense.date}\r\n            amount={expense.amount}\r\n            category={expense.category}\r\n            note={expense.note}\r\n          />\r\n        ))}\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default ExpenseTable;\r\n","// import ModalExpenses from \"./modal_expenses\";\r\n// import { useState } from \"react\";\r\n\r\nconst BudgetCard = ({\r\n  category,\r\n  budget_amount,\r\n  amount_remaining,\r\n  category_transactions,\r\n}) => {\r\n  // amount_remaining is what the actual left on the budget\r\n  // budget_amount and amount_remaining may be passed in as undefined\r\n  budget_amount = budget_amount != null ? budget_amount : 0;\r\n  amount_remaining =\r\n    amount_remaining != null ? amount_remaining : budget_amount;\r\n\r\n  let left_to_spend = amount_remaining > 0 ? amount_remaining : 0;\r\n  let spent = budget_amount - amount_remaining;\r\n\r\n  let card_style_class = \"card card-block h-100\";\r\n  // setting message for card color\r\n  let message = `  |  ${Math.round((spent * 100) / budget_amount)}% Usage`;\r\n\r\n  if (budget_amount === 0 && spent === 0) {\r\n    // Strange empty budget card, but just handling case\r\n    card_style_class += \"\";\r\n    message = \"Error Card\";\r\n  } else if (budget_amount === 0 && spent > 0) {\r\n    // spending on a category that has $0 budget\r\n    card_style_class += \" text-white budget-past-100-percent\";\r\n    message = \"| No budget for this.\";\r\n  } else if (budget_amount === 0 && spent < 0) {\r\n    // refund on a category that has $0 budget\r\n    card_style_class += \" text-white bg-info\";\r\n    message = \" | Reason: Refund?\";\r\n  } else if (spent / budget_amount > 1) {\r\n    // 100 % usage\r\n    card_style_class += \" text-white budget-past-100-percent\";\r\n  } else if (spent / budget_amount > 0.8) {\r\n    // approaching 80% of usage\r\n    card_style_class += \" text-white budget-between-50-100\";\r\n  } else if (spent / budget_amount > 0.5) {\r\n    card_style_class += \" text-white bg-secondary\";\r\n  } else {\r\n    card_style_class += \" text-white budget-below-50\";\r\n  }\r\n\r\n  // const [modalVisible, setModalVisible] = useState(false);\r\n  const showModal = () => {\r\n    let s = `Transaction${\r\n      category_transactions.length > 1 ? \"s\" : \"\"\r\n    } for ${category}`;\r\n    s += \"\\n\";\r\n\r\n    // arbitrary magic number 32 to stop text wrap on iphone\r\n    for (let i = 0; i < 32; i++) {\r\n      s += \"_\";\r\n    }\r\n    s += \"\\n\\n\";\r\n    category_transactions.forEach((trans) => {\r\n      const date_obj = new Date(trans.date);\r\n      const day_month_date =\r\n        String(date_obj.getMonth() + 1) + \"/\" + String(date_obj.getUTCDate());\r\n      s += `${day_month_date} - $${trans.amount} - ${trans.note}\\n`;\r\n    });\r\n\r\n    if (category_transactions.length === 0) {\r\n      s = `No transaction for ${category} this month.`;\r\n    }\r\n    alert(s);\r\n    // setModalVisible(!modalVisible);\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\"col-8 col-md-4 col-no-padding\">\r\n        <div className={card_style_class} onClick={showModal}>\r\n          <h5 className=\"card-title pt-3\">{category}</h5>\r\n          <div className=\"card-body text-left\">\r\n            <p className=\"card-subtitle mb-2\">\r\n              Remaining: ${left_to_spend.toFixed(2)}\r\n            </p>\r\n            <h6 className=\"card-text\">Budget: ${budget_amount}</h6>\r\n            <h6 className=\"card-text\">\r\n              Spent: {spent.toFixed(2)} {message ? `${message}` : \"\"}\r\n            </h6>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {/* <ModalExpenses\r\n        category_name={category}\r\n        expenses={category_transactions}\r\n        show={modalVisible}\r\n        close_event={showModal}\r\n      /> */}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default BudgetCard;\r\n","import { useState } from \"react\";\r\n\r\nconst EnterExpense = ({\r\n  addExpense,\r\n  categories,\r\n  category_amount_remaining,\r\n}) => {\r\n  var today = new Date().toISOString();\r\n  today = today.slice(0, today.indexOf(\"T\"));\r\n  const [date, setDate] = useState(today);\r\n  const [note, setNote] = useState(\"\");\r\n  const [category, setCategory] = useState(\"\");\r\n  const [amount, setAmount] = useState(\"\");\r\n\r\n  const goodLabelStyle = \"col-sm-4 col-form-label text-white\";\r\n  const badLabelStyle = \"text-danger col-sm-4 col-form-label text-white\";\r\n  const goodInputStyle = \"form-control\";\r\n  const badInputStyle = \"form-control is-invalid\";\r\n\r\n  const [dateLabelStyle, setDateLabelStyle] = useState(goodLabelStyle);\r\n  const [dateInputStyle, setDateInputStyle] = useState(goodInputStyle);\r\n  const [amountLabelStyle, setAmountLabelStyle] = useState(goodLabelStyle);\r\n  const [amountInputStyle, setAmountInputStyle] = useState(goodInputStyle);\r\n  const [noteLabelStyle, setNoteLabelStyle] = useState(goodLabelStyle);\r\n  const [noteInputStyle, setNoteInputStyle] = useState(goodInputStyle);\r\n  const [categoryLabelStyle, setCategoryLabelStyle] = useState(goodLabelStyle);\r\n  const [categorySelectStyle, setCategorySelectStyle] =\r\n    useState(goodInputStyle);\r\n\r\n  let categoriesOptions =\r\n    categories.length > 0 &&\r\n    categories.map((item, i) => {\r\n      let left_to_spend = \"\";\r\n      if (\r\n        category_amount_remaining[item.name] != null &&\r\n        category_amount_remaining[item.name] > 0\r\n      ) {\r\n        left_to_spend =\r\n          \"$\" + String(Math.round(category_amount_remaining[item.name]));\r\n        left_to_spend = left_to_spend.padEnd(5) + \"- \";\r\n      } else {\r\n        left_to_spend = \"$0\".padEnd(5) + \"- \";\r\n      }\r\n      return (\r\n        <option key={i} value={item.name}>\r\n          {left_to_spend}\r\n          {item.name}\r\n        </option>\r\n      );\r\n    }, this);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    let okay = true;\r\n    // setting amount label and input to okay or error\r\n    if (amount === \"\" || amount === 0) {\r\n      setAmountLabelStyle(badLabelStyle);\r\n      setAmountInputStyle(badInputStyle);\r\n      okay = false;\r\n    } else {\r\n      setAmountLabelStyle(goodLabelStyle);\r\n      setAmountInputStyle(goodInputStyle);\r\n    }\r\n    // setting note label and input to okay or error\r\n    if (note === \"\") {\r\n      setNoteLabelStyle(badLabelStyle);\r\n      setNoteInputStyle(badInputStyle);\r\n      okay = false;\r\n    } else {\r\n      setNoteLabelStyle(goodLabelStyle);\r\n      setNoteInputStyle(goodInputStyle);\r\n    }\r\n    // setting category label and input to okay or error\r\n    if (category === \"\") {\r\n      setCategoryLabelStyle(badLabelStyle);\r\n      setCategorySelectStyle(badInputStyle);\r\n      okay = false;\r\n    } else {\r\n      setCategoryLabelStyle(goodLabelStyle);\r\n      setCategorySelectStyle(goodInputStyle);\r\n    }\r\n    // setting date label and input to okay or error\r\n    if (date === \"\") {\r\n      setDateLabelStyle(badLabelStyle);\r\n      setDateInputStyle(badInputStyle);\r\n      okay = false;\r\n    } else {\r\n      setDateLabelStyle(goodLabelStyle);\r\n      setDateInputStyle(goodInputStyle);\r\n    }\r\n\r\n    if (okay) {\r\n      try {\r\n        var today = new Date().toISOString();\r\n        today = today.slice(0, today.indexOf(\"T\"));\r\n        let float_amount = Number(amount);\r\n        addExpense({\r\n          date: date,\r\n          amount: float_amount,\r\n          category: category,\r\n          note: note,\r\n        });\r\n        setDate(today);\r\n        setNote(\"\");\r\n        setCategory(\"\");\r\n        setAmount(\"\");\r\n      } catch (e) {\r\n        alert(\"Bad number conversion of amount to Number type\");\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleChange = (data) => (e) => {\r\n    switch (data) {\r\n      case \"amount\":\r\n        setAmount(e.target.value);\r\n        break;\r\n      case \"category\":\r\n        setCategory(e.target.value);\r\n        break;\r\n      case \"note\":\r\n        setNote(e.target.value);\r\n        break;\r\n      case \"date\":\r\n        var today = new Date().toISOString();\r\n        today = today.slice(0, today.indexOf(\"T\"));\r\n        if (e.target.value > today) {\r\n          alert(\"Cannot have an expense in the future.\");\r\n          setDate(today);\r\n          return;\r\n        }\r\n        setDate(e.target.value);\r\n        break;\r\n      default:\r\n        alert(`An unknown data: ${data} was passed into the switch statement.`);\r\n        break;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className=\"px-4\">\r\n      <div className=\"form-group row\">\r\n        <label className={dateLabelStyle} htmlFor=\"dateinput\">\r\n          Date\r\n        </label>\r\n        <div className=\"col-sm-8\">\r\n          <input\r\n            type=\"date\"\r\n            className={dateInputStyle}\r\n            value={date}\r\n            onChange={handleChange(\"date\")}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"form-group row\">\r\n        <label className={amountLabelStyle} htmlFor=\"amountinput\">\r\n          Amount\r\n        </label>\r\n        <div className=\"col-sm-8\">\r\n          <input\r\n            type=\"number\"\r\n            step=\"0.01\"\r\n            className={amountInputStyle}\r\n            value={amount}\r\n            onChange={handleChange(\"amount\")}\r\n            id=\"amountinput\"\r\n            aria-describedby=\"amountHelp\"\r\n            placeholder=\"Amount\"\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"form-group row\">\r\n        <label className={categoryLabelStyle} htmlFor=\"categorySelect\">\r\n          Category\r\n        </label>\r\n        <div className=\"col-sm-8\">\r\n          <select\r\n            className={categorySelectStyle}\r\n            value={category}\r\n            onChange={handleChange(\"category\")}\r\n          >\r\n            <option value=\"\">Choose...</option>\r\n            {categoriesOptions}\r\n          </select>\r\n        </div>\r\n      </div>\r\n      <div className=\"form-group row\">\r\n        <label className={noteLabelStyle} htmlFor=\"noteInput\">\r\n          Note\r\n        </label>\r\n        <div className=\"col-sm-8\">\r\n          <input\r\n            type=\"text\"\r\n            value={note}\r\n            onChange={handleChange(\"note\")}\r\n            className={noteInputStyle}\r\n            id=\"noteInput\"\r\n            aria-describedby=\"noteHelp\"\r\n            placeholder=\"Description\"\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"form-group row justify-content-center\">\r\n        <button type=\"submit\" className=\"btn btn-primary\">\r\n          Submit\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default EnterExpense;\r\n","import \"./App.css\";\r\nimport ExpenseTable from \"./components/expense_table\";\r\nimport BudgetCard from \"./components/budget_card\";\r\nimport EnterExpense from \"./components/enter_expense\";\r\nimport { useState, useEffect } from \"react\";\r\nvar Airtable = require(\"airtable\");\r\nconst api_key = process.env.REACT_APP_API_KEY;\r\nvar base = new Airtable({ apiKey: api_key }).base(\"app5VP16VBp5NgMg5\");\r\n\r\nfunction App() {\r\n  const [expenses, setExpenses] = useState([]);\r\n  const [categories, setCategories] = useState([]);\r\n  const [tableVisible, setTableVisible] = useState(false);\r\n\r\n  const changeVisible = () => {\r\n    setTableVisible(!tableVisible);\r\n  };\r\n\r\n  const addExpense = (expense) => {\r\n    if (\r\n      expense.hasOwnProperty(\"date\") &&\r\n      expense.hasOwnProperty(\"amount\") &&\r\n      expense.hasOwnProperty(\"category\") &&\r\n      expense.hasOwnProperty(\"note\")\r\n    ) {\r\n      // the setExpenses triggers rerender and will fetch the new data from airTable.\r\n      setExpenses([expense, ...expenses]);\r\n      post_new_transaction_to_airtable(expense);\r\n    } else {\r\n      alert(\r\n        \"The expense object made did not have the following props: date, amount, category, note. \\n Failed to set state\"\r\n      );\r\n    }\r\n  };\r\n\r\n  async function get_transactions_from_airtable() {\r\n    let list_records = [];\r\n    base(\"Transactions\")\r\n      .select({\r\n        view: \"Grid view\",\r\n      })\r\n      .eachPage(\r\n        function page(records, fetchNextPage) {\r\n          // This function (`page`) will get called for each page of records.\r\n\r\n          records.forEach(function (record) {\r\n            list_records.push(record.fields);\r\n          });\r\n\r\n          // To fetch the next page of records, call `fetchNextPage`.\r\n          // If there are more records, `page` will get called again.\r\n          // If there are no more records, `done` will get called.\r\n          fetchNextPage();\r\n        },\r\n        function done(err) {\r\n          if (err) {\r\n            console.error(err);\r\n            return;\r\n          } else {\r\n            setExpenses(list_records);\r\n          }\r\n        }\r\n      );\r\n  }\r\n\r\n  // gets the budget categories from airtable\r\n  async function get_categories_from_airtable() {\r\n    let list_records = [];\r\n    base(\"Category_Budgets\")\r\n      .select({\r\n        view: \"Grid view\",\r\n        fields: [\"name\", \"amount\"],\r\n      })\r\n      .eachPage(\r\n        function page(records, fetchNextPage) {\r\n          // This function (`page`) will get called for each page of records.\r\n\r\n          records.forEach(function (record) {\r\n            list_records.push(record.fields);\r\n          });\r\n\r\n          // To fetch the next page of records, call `fetchNextPage`.\r\n          // If there are more records, `page` will get called again.\r\n          // If there are no more records, `done` will get called.\r\n          fetchNextPage();\r\n        },\r\n        function done(err) {\r\n          if (err) {\r\n            console.error(err);\r\n            return;\r\n          } else {\r\n            setCategories(list_records);\r\n          }\r\n        }\r\n      );\r\n  }\r\n\r\n  // creates new transaction to airtable\r\n  async function post_new_transaction_to_airtable(expense) {\r\n    base(\"Transactions\").create([{ fields: expense }], function (err, records) {\r\n      if (err) {\r\n        alert(`Error posting Expense to Airtable ${expense}.`);\r\n        return;\r\n      }\r\n      records.forEach(function (record) {});\r\n    });\r\n  }\r\n\r\n  useEffect(() => {\r\n    get_transactions_from_airtable();\r\n    get_categories_from_airtable();\r\n  }, []);\r\n\r\n  // calculating the actual amounts spend by iterating over the expense transactions\r\n  let actual_budget_spent = { total_spent: 0, total_budget: 0 };\r\n  expenses.forEach((expense) => {\r\n    actual_budget_spent.total_spent += expense.amount;\r\n    if (actual_budget_spent.hasOwnProperty(expense.category)) {\r\n      actual_budget_spent[expense.category] += expense.amount;\r\n    } else {\r\n      actual_budget_spent[expense.category] = expense.amount;\r\n    }\r\n  });\r\n\r\n  // creating a look up dictionary between the name and index spot in categories\r\n  let name_index_category_dict = {};\r\n  categories.forEach((category, idx) => {\r\n    name_index_category_dict[category.name] = idx;\r\n    actual_budget_spent.total_budget += category.amount;\r\n  });\r\n\r\n  // calculating the current amount spent and amount left to spend from categories and transactions info\r\n  // can be less than zero, each component that uses the data can decide if it wants to turn negatives to $0\r\n  let category_amount_remaining = {};\r\n  categories.forEach((category, idx) => {\r\n    // data from the 2 async fetchs might take a big\r\n    if (actual_budget_spent.hasOwnProperty(category.name)) {\r\n      let amount_left = category.amount - actual_budget_spent[category.name];\r\n      category_amount_remaining[category.name] =\r\n        amount_left != null ? amount_left : 0;\r\n    }\r\n  });\r\n\r\n  // calculating what you have to spend today.\r\n  let today = new Date();\r\n  let time = new Date(today.getTime());\r\n  time.setMonth(today.getMonth() + 1);\r\n  time.setDate(0);\r\n  let days =\r\n    time.getDate() > today.getDate() ? time.getDate() - today.getDate() : 0;\r\n  let days_in_month = today.getDate() + days;\r\n  let daily_spend = actual_budget_spent.total_budget / days_in_month;\r\n  let todays_budget =\r\n    daily_spend * days_in_month - actual_budget_spent.total_spent;\r\n\r\n  return (\r\n    <div className=\"container-fluid p-2 text-center\">\r\n      <div className=\"form-div enter-expense-gradient\">\r\n        <h1 className=\"text-white pt-3\">Budget Tracker 💸</h1>\r\n        <small className=\"text-light\">\r\n          Today's Budget: ${todays_budget.toFixed(2)}\r\n        </small>\r\n        <div className=\"row d-flex justify-content-center mt-2\">\r\n          <div className=\"col-md-6\">\r\n            <EnterExpense\r\n              addExpense={addExpense}\r\n              categories={categories}\r\n              category_amount_remaining={category_amount_remaining}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <hr />\r\n\r\n      {/* <Login /> */}\r\n      <div className=\"container-fluid \">\r\n        <h2>Categories</h2>\r\n        <div className=\"row flex-row flex-nowrap overflow-auto\">\r\n          {categories.map((category, idx) => {\r\n            // to keep the meta data in actual_budget_spent from being made into a category card\r\n            return (\r\n              <BudgetCard\r\n                key={idx}\r\n                category={category.name}\r\n                budget_amount={category.amount}\r\n                amount_remaining={category_amount_remaining[category.name]}\r\n                category_transactions={expenses.filter(\r\n                  (expense) => expense.category === category.name\r\n                )}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n      <hr />\r\n\r\n      <div className=\"\">\r\n        <div onClick={changeVisible} style={{ cursor: \"pointer\" }}>\r\n          <h2> Expenses {tableVisible ? \"˄\" : \"˅\"} </h2>\r\n          <small className=\"mb-2\">\r\n            Spent ${actual_budget_spent.total_spent.toFixed(2)} of $\r\n            {actual_budget_spent.total_budget}\r\n          </small>\r\n        </div>\r\n        <ExpenseTable expenses={expenses} tableVisible={tableVisible} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}
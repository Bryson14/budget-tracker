{"version":3,"sources":["components/expense_row.js","components/expense_table.js","components/budget_card.js","components/enter_expense.js","App.js","reportWebVitals.js","index.js"],"names":["ExpenseRow","id","date","amount","category","note","date_obj","Date","items","String","getMonth","getUTCDate","toFixed","map","item","idx","ExpenseTable","expenses","setSpentPerCategory","className","scope","expense","BudgetCard","budget_amount","current_amount","left_to_spend","card_style_class","message","Math","round","EnterExpense","addExpense","categories","today","toISOString","slice","indexOf","useState","setDate","setNote","setCategory","setAmount","goodLabelStyle","badLabelStyle","goodInputStyle","badInputStyle","dateLabelStyle","setDateLabelStyle","dateInputStyle","setDateInputStyle","amountLabelStyle","setAmountLabelStyle","amountInputStyle","setAmountInputStyle","noteLabelStyle","setNoteLabelStyle","noteInputStyle","setNoteInputStyle","categoryLabelStyle","setCategoryLabelStyle","categorySelectStyle","setCategorySelectStyle","categoriesOptions","length","i","value","name","handleChange","data","e","target","alert","onSubmit","preventDefault","okay","float_amount","Number","htmlFor","class","type","onChange","step","placeholder","selected","base","require","apiKey","process","App","setExpenses","setCategories","a","list_records","select","view","eachPage","records","fetchNextPage","forEach","record","push","fields","err","console","error","log","get","create","useEffect","get_transactions_from_airtable","get_categories_from_airtable","actual_budget_spent","total_spent","total_budget","hasOwnProperty","name_index_category_dict","post_new_transaction_to_airtable","Object","entries","key","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.11d81b72.chunk.js","sourcesContent":["const ExpenseRow = ({ id, date, amount, category, note }) => {\r\n  const date_obj = new Date(date);\r\n  const day_month_date =\r\n    String(date_obj.getMonth() + 1) + \"/\" + String(date_obj.getUTCDate());\r\n  const items = [day_month_date, amount.toFixed(2), category, note];\r\n\r\n  return (\r\n    <tr id={id}>\r\n      {items.map((item, idx) => (\r\n        <td key={idx}>{item}</td>\r\n      ))}\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default ExpenseRow;\r\n","import ExpenseRow from \"./expense_row\";\r\n\r\nconst ExpenseTable = ({ expenses, setSpentPerCategory }) => {\r\n  return (\r\n    <table className=\"table table-striped table-dark table-hover align-middle\">\r\n      <thead>\r\n        <tr>\r\n          <th scope=\"col\">Date</th>\r\n          <th scope=\"col\">Amount</th>\r\n          <th scope=\"col\">Category</th>\r\n          <th scope=\"col\">Note</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {expenses.map((expense, idx) => (\r\n          <ExpenseRow\r\n            id={idx}\r\n            key={idx}\r\n            date={expense.date}\r\n            amount={expense.amount}\r\n            category={expense.category}\r\n            note={expense.note}\r\n          />\r\n        ))}\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default ExpenseTable;\r\n","const BudgetCard = ({ category, budget_amount, current_amount }) => {\r\n  // budget_amount may be passed in as a null object or .amount might be null\r\n  budget_amount =\r\n    budget_amount != null && budget_amount.amount != null\r\n      ? budget_amount.amount\r\n      : 0;\r\n\r\n  // for floating point errors\r\n  current_amount = current_amount.toFixed(2);\r\n\r\n  let left_to_spend =\r\n    budget_amount > current_amount\r\n      ? (budget_amount - current_amount).toFixed(2)\r\n      : 0;\r\n\r\n  let card_style_class = \"card card-block h-100\";\r\n  // setting message for card color\r\n  let message = `  |  ${Math.round(\r\n    (current_amount * 100) / budget_amount\r\n  )}% Usage`;\r\n\r\n  if (budget_amount === 0 && current_amount === 0) {\r\n    // Strange empty budget card, but just handling case\r\n    card_style_class += \"\";\r\n    message = \"Error Card\";\r\n  } else if (budget_amount === 0 && current_amount > 0) {\r\n    // spending on a category that has $0 budget\r\n    card_style_class += \" text-white bg-danger\";\r\n    message = \"| No budget for this.\";\r\n  } else if (budget_amount === 0 && current_amount < 0) {\r\n    // spending on a category that has $0 budget\r\n    card_style_class += \" text-white bg-info\";\r\n    message = \" | Reason: Refund?\";\r\n  } else if (current_amount / budget_amount > 1) {\r\n    // 100 % usage\r\n    card_style_class += \" text-white bg-danger\";\r\n  } else if (current_amount / budget_amount > 0.8) {\r\n    // approaching 80% of usage\r\n    card_style_class += \" text-white bg-warning\";\r\n  } else if (current_amount / budget_amount > 0.5) {\r\n    card_style_class += \" text-white bg-secondary\";\r\n  } else {\r\n    card_style_class += \" text-white bg-success\";\r\n  }\r\n\r\n  return (\r\n    <div className=\"col-8 col-md-4 col-no-padding\">\r\n      <div className={card_style_class}>\r\n        <h5 className=\"card-title pt-3\">{category}</h5>\r\n        <div className=\"card-body text-left\">\r\n          <p className=\"card-subtitle mb-2\">Remaining: ${left_to_spend}</p>\r\n          <h6 className=\"card-text\">Budget: ${budget_amount}</h6>\r\n          <h6 className=\"card-text\">\r\n            Spent: {current_amount} {message ? `${message}` : \"\"}\r\n          </h6>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BudgetCard;\r\n","import { useState } from \"react\";\r\n\r\nconst EnterExpense = ({ addExpense, categories }) => {\r\n  var today = new Date().toISOString();\r\n  today = today.slice(0, today.indexOf(\"T\"));\r\n  const [date, setDate] = useState(today);\r\n  const [note, setNote] = useState(\"\");\r\n  const [category, setCategory] = useState(\"\");\r\n  const [amount, setAmount] = useState(\"\");\r\n\r\n  const goodLabelStyle = \"col-sm-4 col-form-label text-white\";\r\n  const badLabelStyle = \"text-danger col-sm-4 col-form-label text-white\";\r\n  const goodInputStyle = \"form-control\";\r\n  const badInputStyle = \"form-control is-invalid\";\r\n\r\n  const [dateLabelStyle, setDateLabelStyle] = useState(goodLabelStyle);\r\n  const [dateInputStyle, setDateInputStyle] = useState(goodInputStyle);\r\n  const [amountLabelStyle, setAmountLabelStyle] = useState(goodLabelStyle);\r\n  const [amountInputStyle, setAmountInputStyle] = useState(goodInputStyle);\r\n  const [noteLabelStyle, setNoteLabelStyle] = useState(goodLabelStyle);\r\n  const [noteInputStyle, setNoteInputStyle] = useState(goodInputStyle);\r\n  const [categoryLabelStyle, setCategoryLabelStyle] = useState(goodLabelStyle);\r\n  const [categorySelectStyle, setCategorySelectStyle] =\r\n    useState(goodInputStyle);\r\n\r\n  let categoriesOptions =\r\n    categories.length > 0 &&\r\n    categories.map((item, i) => {\r\n      return (\r\n        <option key={i} value={item.name}>\r\n          {item.name}\r\n        </option>\r\n      );\r\n    }, this);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    let okay = true;\r\n    // setting amount label and input to okay or error\r\n    if (amount === \"\" || amount === 0) {\r\n      setAmountLabelStyle(badLabelStyle);\r\n      setAmountInputStyle(badInputStyle);\r\n      okay = false;\r\n    } else {\r\n      setAmountLabelStyle(goodLabelStyle);\r\n      setAmountInputStyle(goodInputStyle);\r\n    }\r\n    // setting note label and input to okay or error\r\n    if (note === \"\") {\r\n      setNoteLabelStyle(badLabelStyle);\r\n      setNoteInputStyle(badInputStyle);\r\n      okay = false;\r\n    } else {\r\n      setNoteLabelStyle(goodLabelStyle);\r\n      setNoteInputStyle(goodInputStyle);\r\n    }\r\n    // setting category label and input to okay or error\r\n    if (category === \"\") {\r\n      setCategoryLabelStyle(badLabelStyle);\r\n      setCategorySelectStyle(badInputStyle);\r\n      okay = false;\r\n    } else {\r\n      setCategoryLabelStyle(goodLabelStyle);\r\n      setCategorySelectStyle(goodInputStyle);\r\n    }\r\n    // setting date label and input to okay or error\r\n    if (date === \"\") {\r\n      setDateLabelStyle(badLabelStyle);\r\n      setDateInputStyle(badInputStyle);\r\n      okay = false;\r\n    } else {\r\n      setDateLabelStyle(goodLabelStyle);\r\n      setDateInputStyle(goodInputStyle);\r\n    }\r\n\r\n    if (okay) {\r\n      try {\r\n        var today = new Date().toISOString();\r\n        today = today.slice(0, today.indexOf(\"T\"));\r\n        let float_amount = Number(amount);\r\n        addExpense({\r\n          date: date,\r\n          amount: float_amount,\r\n          category: category,\r\n          note: note,\r\n        });\r\n        setDate(today);\r\n        setNote(\"\");\r\n        setCategory(\"\");\r\n        setAmount(\"\");\r\n      } catch (e) {\r\n        alert(\"Bad number conversion of amount to Number type\");\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleChange = (data) => (e) => {\r\n    switch (data) {\r\n      case \"amount\":\r\n        setAmount(e.target.value);\r\n        break;\r\n      case \"category\":\r\n        setCategory(e.target.value);\r\n        break;\r\n      case \"note\":\r\n        setNote(e.target.value);\r\n        break;\r\n      case \"date\":\r\n        var today = new Date().toISOString();\r\n        today = today.slice(0, today.indexOf(\"T\"));\r\n        if (e.target.value > today) {\r\n          alert(\"Cannot have an expense in the future.\");\r\n          setDate(today);\r\n          return;\r\n        }\r\n        setDate(e.target.value);\r\n        break;\r\n      default:\r\n        alert(`An unknown data: ${data} was passed into the switch statement.`);\r\n        break;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className=\"px-4\">\r\n      <div className=\"form-group row\">\r\n        <label className={dateLabelStyle} htmlFor=\"dateinput\">\r\n          Date\r\n        </label>\r\n        <div class=\"col-sm-8\">\r\n          <input\r\n            type=\"date\"\r\n            className={dateInputStyle}\r\n            value={date}\r\n            onChange={handleChange(\"date\")}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"form-group row\">\r\n        <label className={amountLabelStyle} htmlFor=\"amountinput\">\r\n          Amount\r\n        </label>\r\n        <div class=\"col-sm-8\">\r\n          <input\r\n            type=\"number\"\r\n            step=\"0.01\"\r\n            className={amountInputStyle}\r\n            value={amount}\r\n            onChange={handleChange(\"amount\")}\r\n            id=\"amountinput\"\r\n            aria-describedby=\"amountHelp\"\r\n            placeholder=\"Enter Expense Amount\"\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"form-group row\">\r\n        <label className={categoryLabelStyle} htmlFor=\"categorySelect\">\r\n          Category\r\n        </label>\r\n        <div class=\"col-sm-8\">\r\n          <select\r\n            className={categorySelectStyle}\r\n            value={category}\r\n            onChange={handleChange(\"category\")}\r\n          >\r\n            <option selected value=\"\">\r\n              Choose...\r\n            </option>\r\n            {categoriesOptions}\r\n          </select>\r\n        </div>\r\n      </div>\r\n      <div className=\"form-group row\">\r\n        <label className={noteLabelStyle} htmlFor=\"noteInput\">\r\n          Note\r\n        </label>\r\n        <div class=\"col-sm-8\">\r\n          <input\r\n            type=\"text\"\r\n            value={note}\r\n            onChange={handleChange(\"note\")}\r\n            className={noteInputStyle}\r\n            id=\"noteInput\"\r\n            aria-describedby=\"noteHelp\"\r\n            placeholder=\"You spent what on WHAT??..\"\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"form-group row justify-content-center\">\r\n        <button type=\"submit\" className=\"btn btn-primary\">\r\n          Submit\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default EnterExpense;\r\n","import \"./App.css\";\r\nimport ExpenseTable from \"./components/expense_table\";\r\nimport BudgetCard from \"./components/budget_card\";\r\nimport EnterExpense from \"./components/enter_expense\";\r\nimport { useState, useEffect } from \"react\";\r\nvar Airtable = require(\"airtable\");\r\nconst api_key = process.env.REACT_APP_API_KEY;\r\nvar base = new Airtable({ apiKey: api_key }).base(\"app5VP16VBp5NgMg5\");\r\n\r\nfunction App() {\r\n  const [expenses, setExpenses] = useState([]);\r\n  const [categories, setCategories] = useState([]);\r\n\r\n  const addExpense = (expense) => {\r\n    if (\r\n      expense.hasOwnProperty(\"date\") &&\r\n      expense.hasOwnProperty(\"amount\") &&\r\n      expense.hasOwnProperty(\"category\") &&\r\n      expense.hasOwnProperty(\"note\")\r\n    ) {\r\n      // the setExpenses triggers rerender and will fetch the new data from airTable.\r\n      setExpenses([expense, ...expenses]);\r\n      post_new_transaction_to_airtable(expense);\r\n    } else {\r\n      alert(\r\n        \"The expense object made did not have the following props: date, amount, category, note. \\n Failed to set state\"\r\n      );\r\n    }\r\n  };\r\n\r\n  async function get_transactions_from_airtable() {\r\n    let list_records = [];\r\n    base(\"Transactions\")\r\n      .select({\r\n        view: \"Grid view\",\r\n      })\r\n      .eachPage(\r\n        function page(records, fetchNextPage) {\r\n          // This function (`page`) will get called for each page of records.\r\n\r\n          records.forEach(function (record) {\r\n            list_records.push(record.fields);\r\n          });\r\n\r\n          // To fetch the next page of records, call `fetchNextPage`.\r\n          // If there are more records, `page` will get called again.\r\n          // If there are no more records, `done` will get called.\r\n          fetchNextPage();\r\n        },\r\n        function done(err) {\r\n          if (err) {\r\n            console.error(err);\r\n            return;\r\n          } else {\r\n            setExpenses(list_records);\r\n          }\r\n        }\r\n      );\r\n  }\r\n\r\n  // gets the budget categories from airtable\r\n  async function get_categories_from_airtable() {\r\n    let list_records = [];\r\n    base(\"Category_Budgets\")\r\n      .select({\r\n        view: \"Grid view\",\r\n        fields: [\"name\", \"amount\"],\r\n      })\r\n      .eachPage(\r\n        function page(records, fetchNextPage) {\r\n          // This function (`page`) will get called for each page of records.\r\n\r\n          records.forEach(function (record) {\r\n            console.log(\"Retrieved category:\", record.get(\"Name\"));\r\n            list_records.push(record.fields);\r\n          });\r\n\r\n          // To fetch the next page of records, call `fetchNextPage`.\r\n          // If there are more records, `page` will get called again.\r\n          // If there are no more records, `done` will get called.\r\n          fetchNextPage();\r\n        },\r\n        function done(err) {\r\n          if (err) {\r\n            console.error(err);\r\n            return;\r\n          } else {\r\n            setCategories(list_records);\r\n          }\r\n        }\r\n      );\r\n  }\r\n\r\n  // creates new transaction to airtable\r\n  async function post_new_transaction_to_airtable(expense) {\r\n    base(\"Transactions\").create([{ fields: expense }], function (err, records) {\r\n      if (err) {\r\n        alert(`Error posting Expense to Airtable ${expense}.`);\r\n        return;\r\n      }\r\n      records.forEach(function (record) {});\r\n    });\r\n  }\r\n\r\n  useEffect(() => {\r\n    get_transactions_from_airtable();\r\n    get_categories_from_airtable();\r\n  }, []);\r\n\r\n  // calculating the actual amounts spend by iterating over the expense transactions\r\n  let actual_budget_spent = { total_spent: 0, total_budget: 0 };\r\n  expenses.forEach((expense) => {\r\n    actual_budget_spent.total_spent += expense.amount;\r\n    if (actual_budget_spent.hasOwnProperty(expense.category)) {\r\n      actual_budget_spent[expense.category] += expense.amount;\r\n    } else {\r\n      actual_budget_spent[expense.category] = expense.amount;\r\n    }\r\n  });\r\n\r\n  // creating a look up dictionary between the name and index spot in categories\r\n  let name_index_category_dict = {};\r\n  categories.forEach((category, idx) => {\r\n    name_index_category_dict[category.name] = idx;\r\n    actual_budget_spent.total_budget += category.amount;\r\n  });\r\n  return (\r\n    <div className=\"container-fluid p-2 text-center\">\r\n      <div className=\"form-div\">\r\n        <h1 className=\"text-white\">Budget Tracker</h1>\r\n        <small className=\"text-light\">\r\n          Spent ${actual_budget_spent.total_spent.toFixed(2)} of $\r\n          {actual_budget_spent.total_budget}\r\n        </small>\r\n        <div class=\"row d-flex justify-content-center mt-2\">\r\n          <div class=\"col-md-6\">\r\n            <EnterExpense addExpense={addExpense} categories={categories} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <hr />\r\n\r\n      {/* <Login /> */}\r\n      <div className=\"container-fluid \">\r\n        <h2>Categories</h2>\r\n        <div className=\"row flex-row flex-nowrap overflow-auto\">\r\n          {Object.entries(actual_budget_spent).map(([key, value]) => {\r\n            // to keep the meta data in actual_budget_spent from being made into a category card\r\n            if (key === \"total_spent\" || key === \"total_budget\") {\r\n              return <></>;\r\n            }\r\n            return (\r\n              <BudgetCard\r\n                category={key}\r\n                budget_amount={categories[name_index_category_dict[key]]}\r\n                current_amount={value}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n      <hr />\r\n\r\n      <div className=\"\">\r\n        <h2>Expenses</h2>\r\n        <ExpenseTable expenses={expenses} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}